<script>
  import * as THREE from 'three';
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

  import { Cell, CellState, Game, cellGrid } from '../_game-of-life';

  const [width, height] = [window.innerWidth, window.innerHeight] as const;

  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(100, width / height, 0.1, 100000);
  camera.position.z = 100;

  const renderer = new THREE.WebGLRenderer();
  renderer.setClearColor('#f2f2f2');
  renderer.setSize(width, height);
  document.body.appendChild(renderer.domElement);

  new OrbitControls(camera, renderer.domElement);

  var axes = new THREE.AxesHelper(1);
  scene.add(axes);

  const grid = new THREE.GridHelper(
    200,
    200,
    new THREE.Color('#222'),
    new THREE.Color('#222')
  );
  grid.rotation.x = Math.PI / 2;
  scene.add(grid);

  const geometry = new THREE.PlaneGeometry(1, 1);
  const material = new THREE.MeshBasicMaterial({
    color: 0x222,
    side: THREE.DoubleSide,
  });

  const cellTranslation = new THREE.Vector3(1, 1, 0);
  const renderCell = (x: number, y: number) => {
    const plane = new THREE.Mesh(geometry, material);
    plane.translateOnAxis(cellTranslation, 0.5);
    plane.translateX(x - 100);
    plane.translateY(y - 100);
    scene.add(plane);
  };

  let game = Game(
    cellGrid(200, 200, () =>
      Math.random() >= 0.3 ? Cell(CellState.ALIVE) : Cell(CellState.DEAD)
    )
  );

  renderer.setAnimationLoop(() => {
    scene.children
      .slice()
      .forEach((child) => child.type === 'Mesh' && scene.remove(child));
    game.map((_, x) =>
      _.map((cell, y) => {
        cell.state === CellState.ALIVE && renderCell(x, y);
      })
    );
    game = game.tick();
    renderer.render(scene, camera);
  });
</script>

<body style="margin: 0; overflow: hidden;"></body>
