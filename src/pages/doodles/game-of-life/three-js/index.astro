<script>
  import * as THREE from 'three';
  // @ts-ignore
  import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

  import { Game } from './_game-of-life-fast';

  import { cellGrid } from '../_game-mutable/_grid';

  const [width, height] = [window.innerWidth, window.innerHeight] as const;
  const size = 800;

  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(100, width / height, 0.1, 200000);
  camera.position.z = size / 3;

  const renderer = new THREE.WebGLRenderer();
  renderer.setClearColor('#222222');
  renderer.setSize(width, height);
  document.body.appendChild(renderer.domElement);

  new OrbitControls(camera, renderer.domElement);

  let game = Game(
    cellGrid(size, size, () =>
      Math.random() >= 0.25 ? 0b10000000 : 0b00000000
    )
  );

  const geometry = new THREE.PlaneGeometry(1, 1);
  const material = new THREE.MeshBasicMaterial({ side: THREE.DoubleSide });

  const aliveColor = new THREE.Color('#F2F2F2');
  const deadColor = new THREE.Color('#222222');

  const cellsMesh = new THREE.InstancedMesh(geometry, material, size * size);

  scene.add(cellsMesh);
  game.state().forEach((_, index) => {
    const x = index % size;
    const y = Math.floor(index / size);
    const dummy = new THREE.Object3D();
    dummy.translateOnAxis(new THREE.Vector3(1, 1, 0), 0.5);
    const translateX = x - size / 2;
    const translateY = y - size / 2;
    dummy.translateX(translateX);
    dummy.translateY(translateY);
    dummy.updateMatrix();
    cellsMesh.setMatrixAt(index, dummy.matrix);
    cellsMesh.setColorAt(index, aliveColor);
  });

  const redraw = () => {
    game.state().forEach((cell, index) => {
      if (cell < 0) {
        cellsMesh.setColorAt(index, aliveColor);
        return;
      }
      cellsMesh.setColorAt(index, deadColor);
    });
    cellsMesh.instanceColor!.needsUpdate = true;
  };

  renderer.setAnimationLoop(() => {
    renderer.render(scene, camera);
    redraw();
    game.tick();
  });
</script>

<body style="margin: 0; overflow: hidden;">
  <div
    style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial,
    sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';  position: absolute; padding: 8px; color: teal; background: white; bottom: 0; left: 0;"
  >
    Try dragging
  </div>
</body>
